/*----------------------------------------------------------------------------*\
    $MIXINS
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
    $CONTENTS
\*----------------------------------------------------------------------------*/

    /*
    CONTENTS................You're reading it, LOL
    MODULE..................Includes base module & submodules
    STATE...................States the module can be in
    THEME...................Theming of the module
    */





/*----------------------------------------------------------------------------*\
    $MODULE
\*----------------------------------------------------------------------------*/

    /* CSS3
    \*------------------------------------------------------------------------*/

        /**
         * Rem converter
         *
         * 1. Append `!important` when needed
         * 2. Provide pixel fallback for ie8
         * 3. Loop over values
         *
         * Sample: @include rem(margin, 0 auto 300px);
         */
        @mixin rem($property, $value, $important: false) {
            /* 1 */
            $append: null!default;
            @if $important {
                $append: !important;
            }

            /* 2 */
            @if $legacy-support-for-ie8 == true {
                #{$property}: $value $append;
            }

            /* 3 */
            @if type-of($value) == list {
                $all: ();
                @for $i from 1 through length($value) {
                    @if type-of(nth($value, $i)) == string or unitless(nth($value, $i)) == true or unit(nth($value, $i)) == "em" or unit(nth($value, $i)) == "%" {
                        $all: append($all, nth($value, $i));
                    } @else {
                        $all: append($all, nth($value, $i)/$base-font-size*1rem);
                    }
                }
                #{$property}: $all $append;
            } @else {
                #{$property}: $value/$base-font-size*1rem $append;
            }
        }


        /**
         * Multi rem converter
         * Remmify multiple properties in one swoop
         *
         * Beware: if only one set is provided, the mixin will fail.
         * In that case use the normal rem mixin instead
         *
         * Sample:
           @include multi-rem(
               (padding, $space 1em)
               (margin, $space auto, true)
               (border-radius, 50%)
           );
         */
        @mixin multi-rem($set) {
            @if type-of($set) == list {
                @for $i from 1 through length($set) {
                    $property: nth(nth($set, $i), 1);
                    $value: nth(nth($set, $i), 2);

                    $important: false;
                    @if length(nth($set, $i)) == 3 {
                        $important: nth(nth($set, $i), 3);
                    }
                    @include rem($property, $value, $important);
                }
            }
        }


        /**
         * Prefixer
         * Example: @include prefixer(border-radius, 5px 10px, webkit moz o ms spec);
         */
        @mixin prefixer ($property, $value, $prefixes){

            @each $prefix in $prefixes{
                @if $prefix != spec{
                    -#{$prefix}-#{$property}: $value;
                }
                @else if $prefix == spec{
                    #{$property}: $value;
                }
            }

        }



    /* Typography & vertical rhythm
    \*------------------------------------------------------------------------*/

        /**
         * Font face shorthand
         */
        @mixin fontface($font-family, $file-path, $weight: normal, $style: normal, $asset-pipeline: false ) {
            @font-face {
                font-family: $font-family;
                font-weight: $weight;
                font-style: $style;

                @if $asset-pipeline == true {
                    src: font-url('#{$file-path}.eot');
                    src: font-url('#{$file-path}.eot?#iefix')          format('embedded-opentype'),
                         font-url('#{$file-path}.woff')                format('woff'),
                         font-url('#{$file-path}.ttf')                 format('truetype');
                } @else {
                    src: url('#{$file-path}.eot');
                    src: url('#{$file-path}.eot?#iefix')               format('embedded-opentype'),
                         url('#{$file-path}.woff')                     format('woff'),
                         url('#{$file-path}.ttf')                      format('truetype');
                }
            }
        }


        /**
         * Calculates font, rem font size & line height
         * $multiplier: multiplies line height by the given value
         * $line-height: include line height or not
         * The line height parameter can also be used as the multiplier
         *
         * Sample usage @include font-size(18px, 2);
         */
        @mixin font-size($fs, $line-height: true, $multiplier: 1) {
            @include rem(font-size, $fs);

            $use-line-height: false;

            @if type-of($line-height) == bool {
                @if $line-height == true{
                    $use-line-height: true;
                }
            } @else if type-of($line-height) == number{
                $use-line-height: true;
                $multiplier: $line-height;
            }

            @if $use-line-height == true{
                @if $use-vertical-rhythm == true {
                    line-height: (ceil($fs / $base-line-height) * ($base-line-height / $fs)) * $multiplier;
                } @else {
                    line-height: $line-height-ratio * $multiplier;
                }
            }
        }


        /**
         * Style any number of headings in one sweep, e.g.:
         *
           .foo{
               @include headings(1, 3){
                   color:#BADA55;
               }
           }
         *
         */
        @mixin headings($from: 1, $to: 6){
            %base-heading#{$from - $to} {
                @content
            }

            @if $from >= 1 and $to <= 6{
                @for $i from $from through $to{
                    h#{$i}{
                        @extend %base-heading#{$from - $to};
                    }
                }
            }
        }


        /**
         * Truncate overly long strings
         * sample value truncate(100%)
         */
        @mixin truncate($truncation-boundary){
            max-width: $truncation-boundary;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }


        /**
         * Position shorthand mixin
         */
        @mixin returnPositionValue($property, $value, $use-rem){
            @if type-of($value) != string{
                @if unitless($value) == false{
                    @if $use-rem == true{
                        @include rem($property, $value);
                    } @else {
                        #{$property}: $value;
                    }
                }@else{
                    #{$property}: $value;
                }
            }@else{
                #{$property}: $value;
            }
        }

        @mixin position ($position: relative, $coordinates: 0 0 0 0, $use-rem: true){
            @if type-of($position) == list{
                $coordinates: $position;
                $position: relative;
            }

            $top: false!default;
            $right: false!default;
            $bottom: false!default;
            $left: false!default;

            @for $i from 1 through length($coordinates){
                @if $i == 1{
                    $top: nth($coordinates, $i);
                }
                @else if $i == 2{
                    $right: nth($coordinates, $i);
                }
                @else if $i == 3{
                    $bottom: nth($coordinates, $i);
                }
                @else if $i == 4{
                    $left: nth($coordinates, $i);
                }
            }

            position: $position;

            @if $top {
                @include returnPositionValue(top, $top, $use-rem);

                @if $right == false{
                    @include returnPositionValue(right, $top, $use-rem);
                }
                @if $bottom == false{
                    @include returnPositionValue(bottom, $top, $use-rem);
                }
                @if $right == false{
                    @if $left == false{
                        @include returnPositionValue(left, $top, $use-rem);
                    }
                }
            }

            @if $right {
                @include returnPositionValue(right, $right, $use-rem);

                @if $left == false{
                    @include returnPositionValue(left, $right, $use-rem);
                }
            }

            @if $bottom {
                @include returnPositionValue(bottom, $bottom, $use-rem);
            }

            @if $left {
                @include returnPositionValue(left, $left, $use-rem);
            }

        }



    /* Media Queries
    \*-------------------------------------------------------------------------*/

        /**
         * Enclose a block of code with a media query as named in `$breakpoints`.
         */
        @mixin media-query($media-query){
            $breakpoint-found: false;

            @each $breakpoint in $breakpoints{
                $name: nth($breakpoint, 1);
                $declaration: nth($breakpoint, 2);

                @if $media-query == $name and $declaration{
                    $breakpoint-found: true;

                    @media only screen and #{$declaration}{
                        @content;
                    }
                }
            }

            @if $breakpoint-found == false{
                @warn "Breakpoint ‘#{$media-query}’ does not exist"
            }
        }