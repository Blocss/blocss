/*----------------------------------------------------------------------------*\
    $WIDTHS
    Sizes in human readable format. These are used in conjunction with other
    objects and abstractions found in blocss, most commonly the grid system
    and faux flexbox.
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
    $CONTENTS
\*----------------------------------------------------------------------------*/

    /*
    CONTENTS................You're reading it, LOL
    MIXIN...................There's a mixin fo that
    MODULE..................Includes base module & submodules
    STATE...................States the module can be in
    THEME...................Theming of the module
    */





/*----------------------------------------------------------------------------*\
    $MIXIN
\*----------------------------------------------------------------------------*/

    /**
     * Find the greatest common factor of two integers
     */
    @function gcf($a, $b) {
        @if $b == 0 { @return $a; }
        @else { @return gcf($b, $a % $b); }
    }


    /**
     * Check if a list contains a value
     */
    @function contains($list, $value) {
        @if type-of($list) == list { @return not not index($list, $value); }
        @else { @return $list == $value; }
    }

    /**
     * Fluid grid units & offsets
     * USAGE: provide a space-separated list of integers, each of which
     * represents the number of parts that make up a grid component.
     * Optionally provide a modifier suffix that can be used to adjust
     * grids in different contexts (e.g. viewport dimensions).
     */
    @mixin griddle-build($units, $modifier: '') {

        /**
         * Proportional units
         * Specify the proportional width of an object.
         * Primarily for, but not limited to, use with `.grid__cell` components.
         * Intentional redundancy build into each set of unit classes.
         */
        @each $n in $units {
            /* Avoid creating rules like '.unit-12-12 {}'' */
            $x: $n - 1;

            @for $i from 1 through $x {
                /* Initialize variables */
                $i-r: ();
                $n-r: ();

                /* Find the greatest common factor */
                $g: gcf($i, $n);

                @if $g > 1 {
                    /* Reduced value of $i */
                    $i-r: $i/$g;
                    /* Reduced value of $n */
                    $n-r: $n/$g;
                }

                /**
                 * Check if the reduced value of $n was also supplied in the
                 * list of units to be built
                 */
                $canreduce: contains($units, $n-r);

                /**
                 * Create units based on fractions
                 */
                .unit-#{$i}-#{$n}#{$modifier} {
                    /**
                     * Ff this unit can be reduced then extend the previous rule
                     */
                    @if $i-r and $canreduce {
                        @extend .unit-#{$i-r}-#{$n-r}#{$modifier};
                    }
                    /**
                     * Otherwise create a new % width
                     */
                    @else {
                        width: percentage($i / $n);
                    }
                }

                /**
                 * Create unit offsets based on fractions
                 */
                @if $use-generic-push == true{
                    .push-#{$i}-#{$n}#{$modifier} {
                        /**
                         * if this offset can be reduced then extend the previous rule
                         */
                        @if $i-r and $canreduce {
                            @extend .before-#{$i-r}-#{$n-r}#{$modifier};
                        }
                        /**
                         * otherwise create a new % margin
                         */
                        @else {
                            margin-#{$grid-direction}: percentage($i / $n);
                        }
                    }
                } // use-generic-push

            } // for $i loop
        } // each unit loop


        /**
         * Full width class
         */
        .unit-1-1#{$modifier}{
            width: 100%;
        }


    } // mixin: griddle-build;





@if $use-generic-widths == true{
/*----------------------------------------------------------------------------*\
    $MODULE
\*----------------------------------------------------------------------------*/

    /**
     * Setup generic widths
     */
    @include griddle-build($width-divisions);





/*----------------------------------------------------------------------------*\
    $STATE
\*----------------------------------------------------------------------------*/

@if $responsive == true{

    /* Media Queries
       The default media queries shipped with Blocss:
       Uncomment the ones you need
    \*------------------------------------------------------------------------*/

        /**
         * Desk-wide state
         */
        @if $responsive-extra == true{

            @include media-query(desk-wide){
                @include griddle-build($width-divisions, '--desk-wide');
            }

        } // responsive-extra


        /**
         * Desk state
         */
        @include media-query(desk){
            @include griddle-build($width-divisions, '--desk');
        }


        /**
         * Portable state
         */
        @include media-query(portable){
            @include griddle-build($width-divisions, '--portable');
        }


        /**
         * Lap state
         */
        @include media-query(lap){
            @include griddle-build($width-divisions, '--lap');
        }


        /**
         * Lapup state
         */
        @include media-query(lapup){
            @include griddle-build($width-divisions, '--lapup');
        }


        /**
         * Palm state
         */
        @include media-query(palm){
            @include griddle-build($width-divisions, '--palm');
        }

} // reponsive





/*----------------------------------------------------------------------------*\
    $THEME
\*----------------------------------------------------------------------------*/
} // use-generic-widths