/*----------------------------------------------------------------------------*\
        MIXINS.scss
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
        CONTENTS
\*----------------------------------------------------------------------------*/

    /*
    TYPOGRAPHY
    CSS3
    */





/*----------------------------------------------------------------------------*\
    $TYPOGRAPHY
\*----------------------------------------------------------------------------*/

    /**
     * Adds Margin bottom based on magic number
     * With an optional flag to enable '!important'
     */
    @mixin m-margin-bottom($multiplier: 1, $important: false){
        $append: null!default;
        @if $important{
            $append: !important;
        }
        margin-bottom: $multiplier * $base-spacing-unit $append;
        /* rem unit for modern browsers */
        margin-bottom: $multiplier * $base-spacing-unit / $base-font-size*1rem $append;
    }


    /**
     * Calculates height based on magic number
     * If you want to use 'min-' or 'max-' height, use the prefix param
     */
    @mixin m-height($multiplier: 1, $prefix:""){
        #{$prefix}height: $multiplier * $base-line-height;
        #{$prefix}height: ($multiplier * ($base-line-height / $base-font-size))*1rem;
    }


    /**
     * Calculates font rem font size & line height
     */
    @mixin font-size($fs){
        font-size: $fs;
        font-size: ($fs / $base-font-size)*1rem;
        line-height: ceil($fs / $base-line-height) * ($base-line-height / $fs);
    }


    /**
     * Trucate overly long strings
     * sample value truncate(100%)
     */
    @mixin truncate($truncation-boundary){
        max-width: $truncation-boundary;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }





/*----------------------------------------------------------------------------*\
    $CSS3
\*----------------------------------------------------------------------------*/

    /* Prefixer
       Example: @include prefixer(border-radius, 5px 10px, webkit ms spec);
    \*-------------------------------------------------------------------------*/

        @mixin prefixer ($property, $value, $prefixes) {

            @each $prefix in $prefixes {
                @if $prefix == webkit {
                    -webkit-#{$property}: $value;
                }
                @else if $prefix == moz {
                    -moz-#{$property}: $value;
                }
                @else if $prefix == ms {
                    -ms-#{$property}: $value;
                }
                @else if $prefix == o {
                    -o-#{$property}: $value;
                }
                @else if $prefix == spec {
                    #{$property}: $value;
                }
                @else  {
                    @warn "Unrecognized prefix: #{$prefix}";
                }
            }

        }

        /**
         * Deprecated prefixer
         */
        @mixin vendor($property, $value...){
            @include prefixer($property, $value, webkit moz ms o spec);
        }



    /* Media Queries
    \*-------------------------------------------------------------------------*/

        /**
         * We define some broad breakpoints in our vars file that are picked up here
         * for use in a simple media query mixin. Our options are:
         *
         * palm
         * lap
         * lapup
         * portable
         * desk
         *
         * Not using a media query will, naturally, serve styles to all devices.
         *
         * Usage:
         * '@include media-query(palm){ [styles here] }'
         */
        $palm-end:              $lap-start - 1px;
        $lap-end:               $desk-start - 1px;

        @mixin media-query($media-query){

            /**
             * Handheld
             */
            @if $media-query == palm{

                @media only screen and (max-width:$palm-end) { @content; }

            }


            /**
             * All between '$lap-start' & '$lap-end'
             */
            @if $media-query == lap{

                @media only screen and (min-width:$lap-start) and (max-width:$lap-end) { @content; }

            }


            /**
             * All higher than '$palm-end'
             */
            @if $media-query == lapup{

                @media only screen and (min-width:$lap-start) { @content; }

            }


            /**
             * All lower than '$lap-end'
             */
            @if $media-query == portable{

                @media only screen and (max-width:$lap-end) { @content; }

            }


            /**
             * Desktop
             */
            @if $media-query == desk{

                @media only screen and (min-width:$desk-start) { @content; }

            }

        }



    /* Keyframes
    \*-------------------------------------------------------------------------*/

        /**
         * Keyframes mixin
         */
        @mixin keyframes($name) {
            @-webkit-keyframes #{$name} {
                @content;
            }
            @-moz-keyframes #{$name} {
                @content;
            }
            @-ms-keyframes #{$name} {
                @content;
            }
            @keyframes #{$name} {
                @content;
            }
        }