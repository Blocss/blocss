/**
 * Position shorthand mixin
 */
@mixin returnPositionValue($property, $value, $use-rem){
    @if type-of($value) != string{
        @if unitless($value) == false{
            @if $use-rem == true{
                @include rem($property, $value);
            } @else {
                #{$property}: $value;
            }
        }@else{
            #{$property}: $value;
        }
    }@else{
        #{$property}: $value;
    }
}

@mixin position ($position: relative, $coordinates: 0 0 0 0, $use-rem: true){
    @if type-of($position) == list{
        $coordinates: $position;
        $position: relative;
    }

    $top: false!default;
    $right: false!default;
    $bottom: false!default;
    $left: false!default;

    @for $i from 1 through length($coordinates){
        @if $i == 1{
            $top: nth($coordinates, $i);
        }
        @else if $i == 2{
            $right: nth($coordinates, $i);
        }
        @else if $i == 3{
            $bottom: nth($coordinates, $i);
        }
        @else if $i == 4{
            $left: nth($coordinates, $i);
        }
    }

    position: $position;

    @if $top {
        @include returnPositionValue(top, $top, $use-rem);

        @if $right == false{
            @include returnPositionValue(right, $top, $use-rem);
        }
        @if $bottom == false{
            @include returnPositionValue(bottom, $top, $use-rem);
        }
        @if $right == false{
            @if $left == false{
                @include returnPositionValue(left, $top, $use-rem);
            }
        }
    }

    @if $right {
        @include returnPositionValue(right, $right, $use-rem);

        @if $left == false{
            @include returnPositionValue(left, $right, $use-rem);
        }
    }

    @if $bottom {
        @include returnPositionValue(bottom, $bottom, $use-rem);
    }

    @if $left {
        @include returnPositionValue(left, $left, $use-rem);
    }

}