@if $use-modules-grid == true{
/*----------------------------------------------------------------------------*\
    $GRID
    Fluid and nestable grid system
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
    $CONTENTS
\*----------------------------------------------------------------------------*/

    /*
    CONTENTS................You're reading it, LOL
    MODULE..................Includes base module & submodules
    STATE...................States the module can be in
    THEME...................Theming of the module
    */





/*----------------------------------------------------------------------------*\
    $MODULE
\*----------------------------------------------------------------------------*/

    /*
     * Example usage:
     *
     * <div class="grid">
     *     <div class="grid__cell unit-1-2"></div>
     *     <div class="grid__cell unit-1-2"></div>
     *     <div class="grid__cell unit-1-3"></div>
     *     <div class="grid__cell unit-1-3 push-1-3"></div>
     * </div>
     *
     * <div class="grid grid--center">
     *     <div class="grid__cell unit-1-3"></div>
     *     <div class="grid__cell unit-1-3"></div>
     * </div>
     */


    /**
     * Grid container
     * Must only contain `.grid` or `.grid__cell` components as children.
     *
     * 1. Adjustment for child element margins.
     * 2. Ensure consistent default alignment/
     * 3. Remove inter-unit whitespace that appears between `inline-block` child
     *    elements. Work for all non-monospace font-families.  If you're using a
     *    monospace base font, you will need to set the `grid` font-family to
     *   `sans-serif` and then redeclare the monospace font on the `grid__cell`
     *    objects.
     * 4. Protect against WebKit bug with optimizelegibility.
     * 5. Use lists as grid
     * 6. Clearfix if u use floating grids
     */
    $gutter: ($space*$grid-gutter-multiplier);

    .grid {
        @if $grid-style-floating == true{
            @extend .cf; /* 6 */
        }
        display: block;
        list-style: none; /* 5 */
        padding: 0;
        @include rem(margin-left, -.5 * $gutter); /* 1 */
        @include rem(margin-right, -.5 * $gutter); /* 1 */
        text-align: $grid-direction; /* 2 */
        @if $use-markup-fix == false {
            font-family: sans-serif;
            letter-spacing: -0.31em; /* 3 */
        }
        text-rendering: optimizespeed; /* 4 */
    }

    @if $use-markup-fix == false {
        /**
         * Opera hack
         */
        .opera:-o-prefocus,
        .grid {
            word-spacing: -0.43em;
        }
    }


    /**
     * Child `grid` object adjustments
     * Used for more complex fixed-fluid hybrid grids.
     */
    .grid > .grid {
        overflow: hidden;
        margin-right: 0;
        margin-left: 0;
    }


        /**
         * Grid cells
         * No explicit width by default. Apply `.unit-x-y` classes.
         *
         * 1. Fundamentals of the non-float grid layout mechanism.
         * 2. Apply grid gutter.
         * 3. Controls vertical positioning of units.
         * 4. Keeps content correctly aligned with the grid direction.
         * 5. Reset text defaults.
         * 6. Float left if you choose for floating-grids
         */
        .grid__cell {
            width: 100%;
            display: inline-block; /* 1 */
            @if $grid-style-floating == true{
                float: $grid-direction; /* 6 */
            }
            margin: 0;
            @include rem(padding-left, .5 * $gutter);
            @include rem(padding-right, .5 * $gutter);
            vertical-align: top; /* 3 */
            text-align: $grid-direction; /* 4 */
            @if $use-markup-fix == false {
                font-family: $base-font-family;
                letter-spacing: normal; /* 5 */
                word-spacing: normal; /* 5 */
                text-rendering: auto; /* 5 */
            }
        }


    /**
     * Modifier: Reverse grid direction
     * Columns float right instead of left
     * Applies only on floated grids
     */
    .grid--rev{
        @if $grid-direction == left{
            direction: rtl;
            text-align: left;

            > .grid__cell{
                direction: ltr;
            }
        } @else {
            direction: ltr;
            text-align: left;

            > .grid__cell{
                direction: rtl;
            }
        }
    }


    /**
     * Modifier: horizontally center all grid units
     * Allows for automatic unit centering irrespective of the number of
     * units in the grid.
     */
    .grid--center{
        text-align: center;

        > .grid__cell{
            text-align: left;
        }
    }


    /**
     * Modifier: align grid cells vertically
     */
    .grid--middle{
        > .grid__cell{
            vertical-align: middle;
        }
    }
    .grid--bottom{
        > .grid__cell{
            vertical-align: bottom;
        }
    }


    /**
     * Modifier: horizontally center one unit
     * Set a specific unit to be horizontally centered. Doesn't affect
     * any other units. Can still contain a child `grid` object.
     */
    .grid__cell--center{
        display: block;
        margin: 0 auto;
    }


    /**
     * Create grids with narrower gutters. Extends `.grid`.
     */
    .grid--narrow{
        @include rem(margin-left, -.5 * ($gutter / 2));
        @include rem(margin-right, -.5 * ($gutter / 2));

        > .grid__cell{
            @include rem(padding-left, .5 * ($gutter / 2));
            @include rem(padding-right, .5 * ($gutter / 2));
        }
    }


    /**
     * Create grids with wider gutters. Extends `.grid`.
     */
    .grid--wide{
        @include rem(margin-left, -.5 * ($gutter * 2));
        @include rem(margin-right, -.5 * ($gutter * 2));

        > .grid__cell{
            @include rem(padding-left, .5 * ($gutter * 2));
            @include rem(padding-right, .5 * ($gutter * 2));
        }
    }


    /**
     * Modifier: Remove gutters between columns
     */
    .grid--gutterless{
        margin: 0;

        > .grid__cell{
            padding: 0;
        }
    }




/*----------------------------------------------------------------------------*\
    $STATE
\*----------------------------------------------------------------------------*/





/*----------------------------------------------------------------------------*\
    $THEME
\*----------------------------------------------------------------------------*/
} // use-modules-grid