@if $use-modules-grid == true{
/*----------------------------------------------------------------------------*\
    $GRID
    Fluid and nestable grid system
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
    $CONTENTS
\*----------------------------------------------------------------------------*/

    /*
    CONTENTS................You're reading it, LOL
    MODULE..................Includes base module & submodules
    STATE...................States the module can be in
    THEME...................Theming of the module
    */





/*----------------------------------------------------------------------------*\
    $MODULE
\*----------------------------------------------------------------------------*/

    /*
     * Example usage:
     *
     * <div class="grid">
     *     <div class="grid__cell unit-1-2"></div>
     *     <div class="grid__cell unit-1-2"></div>
     *     <div class="grid__cell unit-1-3"></div>
     *     <div class="grid__cell unit-1-3 push-1-3"></div>
     * </div>
     *
     * <div class="grid grid--center">
     *     <div class="grid__cell unit-1-3"></div>
     *     <div class="grid__cell unit-1-3"></div>
     * </div>
     */


    /**
     * Inline block style grid
     */
    @if $grid-style-floating == false{

        /**
         * Grid container
         * Must only contain `.grid` or `.grid__cell` components as children.
         *
         * 1. Adjustment for child element margins.
         * 2. Ensure consistent default alignment/
         * 3. Remove inter-unit whitespace that appears between `inline-block` child
         *    elements. Work for all non-monospace font-families.  If you're using a
         *    monospace base font, you will need to set the `grid` font-family to
         *   `sans-serif` and then redeclare the monospace font on the `grid__cell`
         *    objects.
         * 4. Protect against WebKit bug with optimizelegibility.
         */
        .grid {
            display: block;
            padding: 0;
            @include rem(margin-left, -.5 *($base-spacing-unit*$grid-gutter-multiplier));
            @include rem(margin-right, -.5 *($base-spacing-unit*$grid-gutter-multiplier));
            text-align: $grid-direction; /* 2 */
            letter-spacing: -0.31em; /* 3 */
            text-rendering: optimizespeed; /* 4 */
        }

        /**
         * Opera hack
         */
        .opera:-o-prefocus,
        .grid {
            word-spacing: -0.43em;
        }


        /**
         * Child `grid` object adjustments
         * Used for more complex fixed-fluid hybrid grids.
         */
        .grid > .grid {
            overflow: hidden;
            margin-right: 0;
            margin-left: 0;
        }


        /**
         * Grid units
         * No explicit width by default. Apply `.unit-x-y` classes.
         *
         * 1. Fundamentals of the non-float grid layout mechanism.
         * 2. Apply grid gutter.
         * 3. Controls vertical positioning of units.
         * 4. Keeps content correctly aligned with the grid direction.
         * 5. Reset text defaults.
         */
        .grid__cell {
            width: 100%;
            display: inline-block; /* 1 */
            margin: 0;
            @include rem(padding-left, .5 *($base-spacing-unit*$grid-gutter-multiplier));
            @include rem(padding-right, .5 *($base-spacing-unit*$grid-gutter-multiplier));
            vertical-align: top; /* 3 */
            text-align: $grid-direction; /* 4 */
            letter-spacing: normal; /* 5 */
            word-spacing: normal; /* 5 */
            text-rendering: auto; /* 5 */

            /**
             * Since we need border-box on our grids to work,
             * apply when global setting is false
             */
            @if $global-border-box == false{
                @include prefixer(box-sizing, border-box, webkit moz spec);
            } // blobal-border-box
        }


        /**
         * Modifier: horizontally center all grid units
         * Allows for automatic unit centering irrespective of the number of
         * units in the grid.
         */
        .grid--center {
            text-align: center;
        }


        /**
         * Modifier: horizontally center one unit
         * Set a specific unit to be horizontally centered. Doesn't affect
         * any other units. Can still contain a child `grid` object.
         */
        .grid--center__cell {
            display: block;
            margin: 0 auto;
        }


    /**
     * Float style grid
     */
    } @else {

        /**
         * Grid
         */
        .grid{
            @include rem(margin-left, -.5 *($base-spacing-unit*$grid-gutter-multiplier));
            @include rem(margin-right, -.5 *($base-spacing-unit*$grid-gutter-multiplier));
            @extend .cf;
        }
            /**
             * grid wrappers as children of grid wrappers
             */
            .grid > .grid{
                margin-left: 0;
                margin-right: 0;
            }


        /**
         * Grid cell
         */
        .grid__cell{
            float: left;
            @include rem(padding-left, .5 *($base-spacing-unit*$grid-gutter-multiplier));
            @include rem(padding-right, .5 *($base-spacing-unit*$grid-gutter-multiplier));

            /**
             * Since we need border-box on our grids to work,
             * apply when global setting is false
             */
            @if $global-border-box == false{
                @include prefixer(box-sizing, border-box, webkit moz spec);
            } // blobal-border-box
        }



        /*  Reversed
            Columns float right instead of left
        \*--------------------------------------------------------------------*/

            .grid--reversed .grid__cell{
                float: right;
            }



    } // grid-style-floating



    /*  Gutterless
        Extends grid, without gutters
    \*--------------------------------------------------------------------*/

        .grid--gutterless{
            margin: 0;
        }
            .grid--gutterless .grid__cell{
                padding: 0;
            }





/*----------------------------------------------------------------------------*\
    $STATE
\*----------------------------------------------------------------------------*/

    /* Media Queries
       The default media queries shipped with Blocss:
       Uncomment the ones you need
    \*------------------------------------------------------------------------*/

        /**
         * Desk-wide state
         */
        //@include media-query(desk-wide){}


        /**
         * Desk state
         */
        //@include media-query(desk){}


        /**
         * lt-desk state
         */
        //@include media-query(lt-desk){}


        /**
         * Lap state
         */
        //@include media-query(lap){}


        /**
         * gt-palm state
         */
        //@include media-query(gt-palm){}


        /**
         * Palm state
         */
        //@include media-query(palm){}





/*----------------------------------------------------------------------------*\
    $THEME
\*----------------------------------------------------------------------------*/
} // use-modules-grid